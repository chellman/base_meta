<?php

/**
 * @file base_meta.module
 */

/**
 * Implements hook_help().
 * 
 */
function base_meta_help($path, $arg) {
  if ($path == 'admin/help#base_meta') {
    return t('Base Meta module provides custom page title and meta tags for search engines.');
  }
}

/**
 * Implements hook_permission().
 *
 */
function base_meta_permission() {
  return array(
    'administer base meta settings' => array(
      'title' => t('Administer Base Meta settings')
    ),
    'edit base meta tags' => array(
      'title' => t('Edit Base Meta tags')
    ),
  );
}

/**
 * Implements hook_menu().
 *
 */
function base_meta_menu() {
  $items = array();

  $items['admin/config/search/base_meta'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Base Meta module settings',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('base_meta_form'),
    'file' => 'base_meta.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer base meta settings'),
  );
  
  $items['admin/config/search/base_meta/default'] = array(
    'title' => 'Default meta tags',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/config/search/base_meta/views'] = array(
    'title' => 'Views pages',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array('base_meta_form_views'),
    'file' => 'base_meta.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer base meta settings'),
    'weight' => 2,
  );
  
  $items['admin/config/search/base_meta/taxonomy'] = array(
    'title' => 'Taxonomy pages',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array('base_meta_form_taxonomy'),
    'file' => 'base_meta.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer base meta settings'),
    'weight' => 3,
  );
  
  $items['admin/config/search/base_meta/taxonomy/%'] = array(
    'title' => 'Taxonomy page meta tags edit form',
    'type' => MENU_SUGGESTED_ITEM,
    'page arguments' => array('base_meta_custom_tags_edit'),
    'file' => 'base_meta.admin.inc',
    'access arguments' => array('administer base meta settings'),
  );
  
  $items['admin/config/search/base_meta/views/%'] = array(
    'title' => 'Views page meta tags edit form',
    'type' => MENU_SUGGESTED_ITEM,
    'page arguments' => array('base_meta_custom_tags_edit'),
    'file' => 'base_meta.admin.inc',
    'access arguments' => array('administer base meta settings'),
  );
  return $items;
}

/**
 * Implements hook_config_info().
 */
function base_meta_config_info() {
  $prefixes['base_meta.settings'] = array(
    'label' => t('Base Meta settings'),
    'group' => t('Configuration'),
  );
  
  return $prefixes;
}

/**
 * Implements hook_form_alter().
 *
 * Adds fieldset to the node create/edit form as topmost vertical tab.
 *
 */
function base_meta_form_alter(&$form, $form_state, $form_id) {

  if (isset($form['#node']) && $form['#node']->type . '_node_form' == $form_id) {

    $config = config('base_meta.settings');

    $form['#validate'][] = 'base_meta_form_validate';
    // edit existing node or add new 
    $nid = isset($form['nid']['#value']) ? $form['nid']['#value'] : NULL;
    $bmt_arr = isset($nid) ? base_meta_get_tags_by_nid($nid) : NULL;

    $form['base_meta'] = array(
      '#type' => 'fieldset',
      '#title' => t('Page title and meta tags'),
      '#access' => user_access('edit base meta tags'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
      '#weight' => -99,
      '#group' => 'additional_settings',
      '#attached' => array(
        'js' => array(
          'vertical-tabs' => backdrop_get_path('module', 'base_meta') . '/js/base_meta.js',
        ),
      ),
    );

    $form['base_meta']['enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Define tags for page of this node'),
      '#default_value' => is_array($bmt_arr),
      '#description' => t('Optional. If not checked, <a href="@url">default values</a> will be used', array('@url' => url('admin/config/search/base_meta'))),
    );

    $form['base_meta']['base_meta_container'] = array(
      '#type' => 'container',
      '#parents' => array('base_meta'),
      '#states' => array(
        'invisible' => array(
          'input[name="base_meta[enabled]"]' => array('checked' => FALSE),
        ),
      ),
    );

    $form['base_meta']['base_meta_container']['page_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Page title'),
      '#default_value' => isset($bmt_arr['page_title']) ? $bmt_arr['page_title'] : '',
      '#description' => t('Description of this node to appear in the &lt;title&gt; tag for search engines search result listings.'),
    );
    $form['base_meta']['base_meta_container']['meta_keywords'] = array(
      '#type' => 'textfield',
      '#title' => t('Meta keywords'),
      '#default_value' => isset($bmt_arr['meta_keywords']) ? $bmt_arr['meta_keywords'] : '',
      '#size' => 120,
      '#maxlength' => 255,
      '#description' => t('Comma separated list of keywords.'),
    );
    $form['base_meta']['base_meta_container']['meta_description'] = array(
      '#type' => 'textarea',
      '#title' => t('Meta description'),
      '#default_value' => isset($bmt_arr['meta_description']) ? $bmt_arr['meta_description'] : '',
      '#rows' => 3,
      '#description' => t('One or two sentence described this page (350 characters max. without any HTML tags.)'),
    );
    
    $form['base_meta']['base_meta_container']['open_graph'] = array(
      '#type' => 'fieldset',
      '#title' => t('Open Graph'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['base_meta']['base_meta_container']['open_graph']['meta_og_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Open Graph title'),
      '#default_value' => isset($bmt_arr['meta_og_title']) ? $bmt_arr['meta_og_title'] : '',
      '#description' => t('The title of this page as rendered on Facebook'),
    );
    $form['base_meta']['base_meta_container']['open_graph']['meta_og_description'] = array(
      '#type' => 'textarea',
      '#title' => t('Open Graph description'),
      '#default_value' => isset($bmt_arr['meta_og_description']) ? $bmt_arr['meta_og_description'] : '',
      '#rows' => 3,
      '#description' => t('One or two sentence described this page (350 characters max. without any HTML tags.)'),
    );
    $form['base_meta']['base_meta_container']['open_graph']['meta_og_type'] = array(
      '#type' => 'select',
      '#options' => array(
        'website' => t('Website'),
        'article' => t('Article'),
      ),
      '#title' => t('Open Graph type'),
      '#default_value' => isset($bmt_arr['meta_og_type']) ? $bmt_arr['meta_og_type'] : '',
      '#description' => t('The type of this item'),
    );
    $form['base_meta']['base_meta_container']['open_graph']['meta_og_image_fid'] = array(
      '#title' => t('Image upload'),
      '#type' => 'managed_file',
      '#upload_location' => 'public://' . $config->get('meta_og_image_dir'),
      '#default_value' => isset($bmt_arr['meta_og_image_fid']) ? $bmt_arr['meta_og_image_fid'] : NULL,
      '#upload_validators' => array(
        'file_validate_extensions' => array('gif png jpg jpeg'),
        'file_validate_size' => array(file_upload_max_size()),
      ),
      '#wrapper_attributes' => array(
        'data-editor-image-toggle' => t('Image Upload'),
      ),
    );
    
    $form['base_meta']['base_meta_container']['group'] = array(
      '#type' => 'fieldset',
      '#title' => t('More'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );    
    $form['base_meta']['base_meta_container']['group']['meta_robots'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Meta robots'),
      '#options' => backdrop_map_assoc(array('NOINDEX', 'NOFOLLOW', 'NOARCHIVE', 'NOODP', 'NOSNIPPET')),
      '#default_value' => isset($bmt_arr['meta_robots']) ? unserialize($bmt_arr['meta_robots']) : array(),
      '#description' => 'Search engines assume "INDEX" and "FOLLOW" unless these are specifically disabled above.',
    );
    $form['base_meta']['base_meta_container']['group']['meta_canonical'] = array(
      '#type' => 'textfield',
      '#title' => t('Canonical URL'),
      '#default_value' => isset($bmt_arr['meta_canonical']) ? $bmt_arr['meta_canonical'] : '',
      '#description' => t("Use a relative URL without the initial slash for this (or default) domain or full URL in other case."
          . " By default (if no value) this will automatically use URL of this page."),
    );
  }
}

/**
 * Implements hook_validate().
 * 
 * Error message only if all fields empty.
 *
 * @todo per field validation. 
 */

function base_meta_form_validate($form, &$form_state) {
  
  if (isset($form['#node']) && is_object($form['#node'])) {
    if ($form_state['values']['base_meta']['enabled'] == 1) {
      $base_meta_values = $form_state['values']['base_meta'];

      $empty_tags = (
        empty($base_meta_values['page_title']) &&
        empty($base_meta_values['meta_keywords']) && 
        empty($base_meta_values['meta_description'])) ? TRUE : FALSE;

      $checked_boxes = FALSE;

      foreach ($base_meta_values['group']['meta_robots'] as $tag => $value) {
        if (is_string($value)) {
          $checked_boxes = TRUE;
        } 
      }
      
      if ($empty_tags && !$checked_boxes) {
        form_set_error('',
          t('You must fill some value(s) to form "Page title and meta tags" or uncheck checkbox "Define tags for page of this node".'));
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function base_meta_node_insert(Node $node) {

  $base_meta_enabled = isset($node->base_meta['enabled']) ? $node->base_meta['enabled'] : 0;

  if ($base_meta_enabled) {
    base_meta_record_insert($node);
  }
}

/**
 * Implements hook_node_update().
 */
function base_meta_node_update(Node $node) {

  $base_meta_enabled = isset($node->base_meta['enabled']) ? $node->base_meta['enabled'] : 0;

  $found = db_select('base_meta', 'bm')
      ->fields('bm')
      ->condition('nid', $node->nid, '=')
      ->execute()
      ->fetchObject();

  $bmid = is_object($found) ? $bmid = $found->bmid : NULL;

  if ($base_meta_enabled) {
    if ($bmid) {
      base_meta_record_update($node);
    }
    else {
      base_meta_record_insert($node);
    }
  }
  else {
    if ($bmid) {
      base_meta_record_delete($node);
    }
  }
}

/**
 * Implements hook_node_predelete().
 */
function base_meta_node_predelete(Node $node) {

  base_meta_record_delete($node);
}

function base_meta_record_insert($node) {

  $path             = $node->path;
  $path['alias']    = trim($path['alias']);
  $path_alias       = (!empty($path['alias'])) ? $path['alias'] : 'node/' . $node->nid;
  $langcode         = isset($node->langcode) ? $node->langcode : LANGUAGE_NONE;
  $page_title       = trim($node->base_meta['page_title']);
  $meta_keywords    = trim($node->base_meta['meta_keywords']);
  $meta_description = trim($node->base_meta['meta_description']);
  $meta_robots      = serialize($node->base_meta['group']['meta_robots']);
  $meta_canonical   = trim($node->base_meta['group']['meta_canonical']);
  $meta_og_title = trim($node->base_meta['open_graph']['meta_og_title']);
  $meta_og_description = trim($node->base_meta['open_graph']['meta_og_description']);
  $meta_og_type = trim($node->base_meta['open_graph']['meta_og_type']);
  $meta_og_image_fid = trim($node->base_meta['open_graph']['meta_og_image_fid']);

  db_insert('base_meta')
      ->fields(array(
        'nid' => $node->nid,
        'path_alias' => $path_alias,
        'langcode' => $langcode,
        'page_title' => $page_title,
        'meta_keywords' => $meta_keywords,
        'meta_description' => $meta_description,
        'meta_robots' => $meta_robots,
        'meta_canonical' => $meta_canonical,
        'meta_og_title' => $meta_og_title,
        'meta_og_description' => $meta_og_description,
        'meta_og_type' => $meta_og_type,
        'meta_og_url' => $meta_canonical,
        'meta_og_image_fid' => $meta_og_image_fid,
        'uid' => $node->uid,
        'changed' => time(),
      ))
      ->execute();
}

// Delete db record associated with this node (if any).
function base_meta_record_delete($node) {

  $result = db_select('base_meta', 'bm')
      ->fields('bm')
      ->condition('nid', $node->nid, '=')
      ->execute()
      ->fetchObject();

  if (is_object($result)) {
    $bmid = $result->bmid;
    db_delete('base_meta')
        ->condition('bmid', $bmid)
        ->execute();
  }
}

function base_meta_record_update($node) {

  $path                 = $node->path;
  $path['alias']        = trim($path['alias']);
  $path_alias           = (!empty($path['alias'])) ? $path['alias'] : 'node/' . $node->nid;
  $langcode             = isset($node->langcode) ? $node->langcode : LANGUAGE_NONE;
  $page_title           = trim($node->base_meta['page_title']);
  $meta_keywords        = trim($node->base_meta['meta_keywords']);
  $meta_description     = trim($node->base_meta['meta_description']);
  $meta_robots          = serialize($node->base_meta['group']['meta_robots']);
  $meta_canonical       = trim($node->base_meta['group']['meta_canonical']);
  $meta_og_title        = trim($node->base_meta['open_graph']['meta_og_title']);
  $meta_og_description  = trim($node->base_meta['open_graph']['meta_og_description']);
  $meta_og_type         = trim($node->base_meta['open_graph']['meta_og_type']);
  $meta_og_image_fid    = trim($node->base_meta['open_graph']['meta_og_image_fid']);

  db_update('base_meta')
      ->fields(array(
        'path_alias' => $path_alias,
        'langcode' => $langcode,
        'page_title' => $page_title,
        'meta_keywords' => $meta_keywords,
        'meta_description' => $meta_description,
        'meta_robots' => $meta_robots,
        'meta_canonical' => $meta_canonical,
        'meta_og_title' => $meta_og_title,
        'meta_og_description' => $meta_og_description,
        'meta_og_type' => $meta_og_type,
        'meta_og_url' => $meta_canonical,
        'meta_og_image_fid' => $meta_og_image_fid,
        'uid' => $node->uid,
        'changed' => time(),
      ))
      ->condition('nid', $node->nid, '=')
      ->execute();
}

/**
 * Get tags associated with node.
 *
 * @params string $nid
 *   node identifier for retriving data.
 *
 * @return array of tags or false 
 *   Found base meta tags.
 */
function base_meta_get_tags_by_nid($nid) {
  $query = db_select('base_meta', 'bm')
      ->fields('bm')
      ->condition('nid', $nid, '=')
      ->execute()
      ->fetchAssoc();
  return $query;
}

/**
 * Get meta tags associated with views or taxonomy page from configuraton file.
 *
 * @params string $page_type
 *   page type
 * 
 * @params string $page_name
 *   page name
 *
 * @return array of tags or empty array
 *   
 */
function base_meta_get_tags_from_config_file($page_type, $page_name) {

  $config = config('base_meta.settings');
  $tags = $config->get($page_type . '_pages_meta_tags');

  if (!empty($tags) && array_key_exists ($page_name , $tags)) {
    $tags = $tags[$page_name];
  }
  else {
    $tags = array();
  }
  return $tags;
}

/**
 * Implements hook_html_head_alter().
 */
function base_meta_html_head_alter(&$head_elements) {
  foreach ($head_elements as $key => $element) {

    if (isset($element['#attributes']['rel']) && $element['#attributes']['rel'] == 'canonical') {
      $system_canonical = $element['#attributes']['href'];
      // Check if we need a custom canonical URL.
      $head_elements[$key]['#attributes']['href'] = base_meta_canonical_url($system_canonical);
    }
  }
}

/**
 * 
 * @global object $language
 * @return object $caller
 */
function base_meta_caller() {
  global $language;
  
  $caller = new stdClass();
  $caller->is_front = backdrop_is_front_page();
  if (module_exists('language')) {
    $caller->langcode = $language->langcode;
  }

  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $caller->nid = arg(1);
  }

  if (arg(0) == 'taxonomy' && arg(1) == 'term' && arg(2)) {
    $term_name = taxonomy_term_load(arg(2))->name;
    $caller->term_name = $term_name;
  }

  if (function_exists('views_get_page_view') && views_get_page_view()){
    $view_name = views_get_page_view()->name;
    $caller->page_view_name = $view_name;
  }
  
  return $caller;
}

/**
 * Redefine system canonical if needed
 * 
 * @return string $canonical_url
 */
function base_meta_canonical_url($system_canonical = '') {

//  if (config_get('system.core', 'canonical_secure')) {
//    $system_canonical = str_replace('http://', 'https://', $system_canonical);
//  }
  global $base_url;
  $base_canonical_url = rtrim(config_get('base_meta.settings', 'base_canonical_url'), '/');
  $caller = base_meta_caller();

  if ($base_canonical_url != '') {
    // @todo secure protocol replace
    $system_canonical = str_replace($base_url, $base_canonical_url, $system_canonical);
  }
  else {
    $base_canonical_url = $base_url;
  }

  $canonical_url = $system_canonical;
  
  if (is_object($caller)) {

    if (isset($caller->nid)) {
      $base_meta_tags = base_meta_get_tags_by_nid($caller->nid);

      $canonical_from_node = $base_meta_tags['meta_canonical'];
      if ($canonical_from_node != '') {
        $canonical_url = strpos($canonical_from_node, 'http') !== 0 ? $base_canonical_url . '/' . $canonical_from_node : $canonical_from_node;
      }
    }
    
    if (isset($caller->term_name)) {
      $saved_tags = base_meta_get_tags_from_config_file('taxonomy', $caller->term_name);
      $canonical_url_from_config_file = isset($saved_tags['meta_canonical']) ? $saved_tags['meta_canonical'] : '';
      if (!empty($canonical_url_from_config_file)) {
        $canonical_url = strpos($canonical_url_from_config_file, 'http') !== 0 ? $base_canonical_url . '/' . $canonical_url_from_config_file : $canonical_url_from_config_file;
      }
    }
  }

  return $canonical_url;
}

/**
 *  Build array of tags 
 */
function base_meta_get_defined_tags() {
  $config               = config('base_meta.settings');
  $caller               = base_meta_caller();
  $meta_keywords        = $config->get('meta_keywords');
  $meta_description     = $config->get('meta_description');
  $arr_meta_robots      = $config->get('meta_robots');
  $meta_robots          = '';
  $meta_og_title        = $config->get('meta_og_title');
  $meta_og_description  = $config->get('meta_og_description');
  $meta_og_type         = $config->get('meta_og_type');
  $meta_og_image_fid    = $config->get('meta_og_image_fid');
  $base_meta_tags_array = array();
  
  if (is_object($caller)) {
    // from node
    if (isset($caller->nid)) {
      $base_meta_tags = base_meta_get_tags_by_nid($caller->nid);
      if (is_array($base_meta_tags)) {
        $meta_keywords        = $base_meta_tags['meta_keywords'] != '' ? $base_meta_tags['meta_keywords'] : NULL;
        $meta_description     = $base_meta_tags['meta_description'] != '' ? $base_meta_tags['meta_description'] : NULL;
        $arr_meta_robots      = $base_meta_tags['meta_robots'] != '' ? unserialize($base_meta_tags['meta_robots']) : array();
        $meta_og_title        = $base_meta_tags['meta_og_title'] != '' ? $base_meta_tags['meta_og_title'] : NULL;
        $meta_og_description  = $base_meta_tags['meta_og_description'] != '' ? $base_meta_tags['meta_og_description'] : NULL;
        $meta_og_image_fid    = $base_meta_tags['meta_og_image_fid'] != '' ? $base_meta_tags['meta_og_image_fid'] : NULL;
        $meta_og_url          = $base_meta_tags['meta_canonical'] != '' ? $base_meta_tags['meta_canonical'] : NULL;
        $meta_og_type         = $base_meta_tags['meta_og_type'] != '' ? $base_meta_tags['meta_og_type'] : NULL;
      }
      
      if (!empty($arr_meta_robots)) {
        foreach ($arr_meta_robots as $key => $value) {
          if ($value) {
            $meta_robots .= strtolower($key) . ', ';
          }
        }
        $meta_robots = rtrim($meta_robots, ', ');
      }

      if (!empty($meta_og_image_fid)) {
        $image = file_load($meta_og_image_fid);
        $meta_og_image_url = is_object($image) ? file_create_url($image->uri) : '';
      } else {
        $meta_og_image_url = '';
      }

      if (empty($meta_og_url)) {
        $meta_og_url = url('node/'.$caller->nid, array('absolute' => TRUE));
      } else {
        $meta_og_url = base_meta_canonical_url();
      }
      
      $base_meta_tags_array = array(
        'keywords' => $meta_keywords,
        'description' => $meta_description,
        'robots' => $meta_robots,
        'og:title' => $meta_og_title,
        'og:description' => $meta_og_description,
        'og:image' => $meta_og_image_url,
        'og:type' => $meta_og_type,
        'og:url' => $meta_og_url,
      );
    }
    
    // from views page
    if (isset($caller->page_view_name)) {
      
      $page_view_name = $caller->page_view_name;
      $config_sub_path = 'views_pages_meta_tags.' . $page_view_name . '.';

      $base_meta_tags_array = base_meta_get_tags_by_caller($config_sub_path);

    }
    // from taxonomy page
    if (isset($caller->term_name)) {

      $page_taxonomy_name = $caller->term_name;
      $config_sub_path = 'taxonomy_pages_meta_tags.' . $page_taxonomy_name . '.';
      
      $base_meta_tags_array = base_meta_get_tags_by_caller($config_sub_path);
    }
    
 }
  return $base_meta_tags_array;
}

/**
 * 
 * @param string $config_sub_path
 * 
 */
function base_meta_get_tags_by_caller($config_sub_path) {
  
  $config           = config('base_meta.settings');
  $meta_keywords    = $config->get($config_sub_path . 'meta_keywords');
  $meta_description = $config->get($config_sub_path . 'meta_description');
  $arr_meta_robots  = $config->get($config_sub_path . 'meta_robots');
  $meta_robots      = '';
      
  if (!empty($arr_meta_robots)) {
    foreach ($arr_meta_robots as $key => $value) {
      if ($value) {
        $meta_robots .= strtolower($key) . ', ';
      }
    }
    $meta_robots = rtrim($meta_robots, ', ');
  }
  
  $base_meta_tags_array = array(
    'keywords' => $meta_keywords,
    'description' => $meta_description,
    'robots' => $meta_robots,
  );
  
  return $base_meta_tags_array;
}

/**
 * Implements hook_preprocess_page().
 */
function base_meta_preprocess_page(&$variables) {
  
  global $language, $base_url;

  $config             = config('base_meta.settings');
  $base_meta_title    = base_meta_get_page_title();
  $tags               = base_meta_get_defined_tags();
  $caller             = base_meta_caller();
  $system_canonical   = '';
  $base_canonical_url = rtrim(config_get('base_meta.settings', 'base_canonical_url'), '/');
  
  if ($base_meta_title != '') {
    if ($config->get('append_site_name')) {
      $site_name_divider = $config->get('site_name_divider');

      $head_site_name = $variables['head_title_array']['name'];
      $variables['head_title'] = $base_meta_title . ' ' . $site_name_divider . ' ' . $head_site_name;
    }
    else {
      $variables['head_title'] = $base_meta_title;
    }
  }

  if (!empty($tags)) {
    foreach ($tags as $name => $value) {
      if ($value) {
        $element = array(
          '#tag' => 'meta',
          '#attributes' => array(
            'name' => $name,
            'content' => $value,
          ),
        );
        backdrop_add_html_head($element, 'base_meta_' . $name);
      }
    }
  }
  
  if (backdrop_is_front_page() && !isset($caller->nid) && !isset($caller->page_view_name) && !isset($caller->term_name)) {
    // @todo: language_negotiation for domain case
    $lang = language_default()->langcode != $language->langcode ? '/' . $language->langcode : '';
    $canonical_url = (!empty($base_canonical_url) ? $base_canonical_url : $base_url) . $lang;
    backdrop_add_html_head_link(array('rel' => 'canonical', 'href' => $canonical_url));
  }
  
  if (isset($caller->page_view_name)) {

    if ($base_canonical_url != '') {
      // @todo secure protocol replace
      $system_canonical = str_replace($base_url, $base_canonical_url, $system_canonical);
    }
    else {
      $base_canonical_url = $base_url;
    }

    $canonical_url = $system_canonical;

    $saved_tags = base_meta_get_tags_from_config_file('views', $caller->page_view_name);
    $canonical_url_from_config_file = isset($saved_tags['meta_canonical']) ? $saved_tags['meta_canonical'] : '';
    if (!empty($canonical_url_from_config_file)) {
      $canonical_url = strpos($canonical_url_from_config_file, 'http') !== 0 ? $base_canonical_url . '/' . $canonical_url_from_config_file : $canonical_url_from_config_file;
      backdrop_add_html_head_link(array('rel' => 'canonical', 'href' => $canonical_url));
    }
  }
}

/**
 * 
 * @return array of views pages with path defined
 */
function base_meta_get_views_pages() {
  
  $result = array();
  $views = views_get_enabled_views();
  foreach ($views as $view) {

    if (empty($view->display)) {
      // Skip this view as it is broken.
      debug(t("Skipping broken view @view", array('@view' => $view->name)));
      continue;
    }
    
    foreach (array_keys($view->display) as $id) {
      $plugin = views_fetch_plugin_data('display', $view->display[$id]->display_plugin);

      if ($plugin['name'] == 'page') {
        $view_name = $view->name;
        $page_path = $view->display[$id]->display_options['path'];
        // Skip admin views
        if (strpos($page_path, 'admin/') === FALSE) {
          $result[][$view_name] = $page_path;
        }
      }           
    }
  }
  
  return $result;
}

/**
 * Get page title from node (if defined there).
 * 
 * @return string $page_title
 */
function base_meta_get_page_title() {
  $page_title = '';
  $caller     = base_meta_caller();

  if (is_object($caller)) {
    if (isset($caller->nid)) {
      $base_meta_tags = base_meta_get_tags_by_nid($caller->nid);
      if (is_array($base_meta_tags)) {
        $page_title = $base_meta_tags['page_title'];
      }
    }
    if (isset($caller->term_name)) {
      $saved_tags = base_meta_get_tags_from_config_file('taxonomy', $caller->term_name);
      if (!empty($saved_tags)) {
        $page_title = isset($saved_tags['page_title']) ? $saved_tags['page_title'] : '';
      }
    }
    if (isset($caller->page_view_name)) {
      $saved_tags = base_meta_get_tags_from_config_file('views', $caller->page_view_name);
      if (!empty($saved_tags)) {
        $page_title = isset($saved_tags['page_title']) ? $saved_tags['page_title'] : '';
      }
    }
  }
  return $page_title;
}


/**
 * Helper function returns options we might use for Open Graph types
 * 
 * @return array
 */
function _base_meta_get_og_types() {
  return array(
    'website' => t('Website'),
    'article' => t('Article'),
  );
}