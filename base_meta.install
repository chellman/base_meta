<?php
/**
 * @file
 * Base Meta install
 */

/**
 * Implements hook_schema().
 * Define SQL table for base_meta
 */
function base_meta_schema() {
  $schema = array();

  $schema['base_meta'] = array(
    'description' => 'Table to store meta tags, page titles and path aliases.',
    'fields' => array(
      'bmid' => array(
        'description' => 'Unique base meta identifier.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'The node.nid to which those tags.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'path_alias' => array(
        'description' => 'Path alias for set meta tags and page title.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'langcode' => array(
        'description' => 'The language code of correspond node.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
      'page_title' => array(
        'description' => 'Page title tag content.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'meta_keywords' => array(
        'description' => 'Meta keywords content.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'meta_description' => array(
        'description' => 'Meta description content.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'meta_robots' => array(
        'description' => 'Meta robots content.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'meta_canonical' => array(
        'description' => 'Meta canonical content.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'meta_og_title' => array(
        'description' => 'Meta open graph title.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'meta_og_description' => array(
        'description' => 'Meta open graph description.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'meta_og_image_fid' => array(
        'description' => 'Meta open graph image fid.',
        'type' => 'int',
        'not null' => FALSE,
        'unsigned' => TRUE,
      ),
      'meta_og_type' => array(
        'description' => 'Meta open graph type.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'meta_og_url' => array(
        'description' => 'Meta open graph URL.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE
      ),
      'uid' => array(
        'description' => 'Author identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Unix timestamp of when record occurred.',
      ),
    ),
    'primary key' => array('bmid'),
  );

  return $schema;
}

/**
 *  Add and init two new variables to config
 */
function base_meta_update_1000() {

  $config = config('base_meta.settings');

  $config->set('append_site_name', 1);
  $config->set('site_name_divider', '|');

  $config->save();  
}

/**
 *  Add and init new empty arrays for taxonomy and views pages meta tags to config.
 */
function base_meta_update_1001() {

  $config = config('base_meta.settings');

  $config->set('taxonomy_pages_meta_tags', array());
  $config->set('views_pages_meta_tags', array());

  $config->save();  
}

/**
 *  Add and init new fields and config for Open Graph tags.
 */
function base_meta_update_1002() {
  $fields = array(
    'meta_og_title' => array(
      'description' => 'Meta open graph title.',
      'type' => 'varchar',
      'length' => '255',
      'not null' => FALSE,
    ),
    'meta_og_description' => array(
      'description' => 'Meta open graph description.',
      'type' => 'varchar',
      'length' => '255',
      'not null' => FALSE,
    ),
    'meta_og_type' => array(
      'description' => 'Meta open graph type.',
      'type' => 'varchar',
      'length' => '255',
      'not null' => FALSE,
    ),
    'meta_og_image_fid' => array(
      'description' => 'Meta open graph image fid.',
      'type' => 'int',
      'not null' => FALSE,
      'unsigned' => TRUE,
    ),
    'meta_og_url' => array(
      'description' => 'Meta open graph URL.',
      'type' => 'varchar',
      'length' => '255',
      'not null' => FALSE,
    ),
  );
  
  foreach($fields as $field_name => $schema) {
    if (!db_field_exists('base_meta', $field_name)) {
      db_add_field('base_meta', $field_name, $schema);
    }
  }

  $config = config('base_meta.settings');

  $config->set('meta_og_type', '');
  $config->set('meta_og_title', '');
  $config->set('meta_og_description', '');
  $config->set('meta_og_image_dir', 'og_image');
  $config->set('meta_og_image_fid', '');
  
  $config->save();  
}